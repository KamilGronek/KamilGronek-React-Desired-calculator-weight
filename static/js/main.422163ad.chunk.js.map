{"version":3,"sources":["components/Results.js","components/Article.js","App.js","serviceWorker.js","index.js"],"names":["Results","props","cache","messages","EmptyDescAndValue","validCalendarDate","currentDate","endDate","validInitialWeight","parseInt","initialWeight","validDesiredWeight","desiredWeight","validHeight","height","validInputValues","state","result","emptyTitles","this","looseWeight","gainWeight","currentBMI","desiredBMI","numbersOfDays","getCurrentBmiText","getDesiredBmiText","isClickedCountButton","loosedWeight","text","gainedWeight","changeWeight","KilogPerDay","WeightPerDay","Math","abs","toFixed","KiloPerWeek","className","style","color","Component","Article","handleChangeEvent","type","step","min","max","name","value","onChange","htmlFor","defaultValue","App","e","target","setState","handleCountButton","getLoseandGain","getNumberofDays","getBMI","clickedCountButton","dateDiffrence","Date","round","today","tomorrow","setDate","getDate","todayISO","toISOString","slice","tomorrowISO","emptyView","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.422163ad.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Results extends Component {\r\n  cache = \"\";\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      result: \"0\",\r\n      emptyTitles: false,\r\n    };\r\n  }\r\n\r\n  messages = {\r\n    EmptyDescAndValue: \"Incorrectly set values\",\r\n  };\r\n\r\n  validCalendarDate = () => {\r\n    return this.props.currentDate < this.props.endDate;\r\n  };\r\n\r\n  validInitialWeight = () => {\r\n    return parseInt(this.props.initialWeight) > 30;\r\n  };\r\n\r\n  validDesiredWeight = () => {\r\n    return parseInt(this.props.desiredWeight) > 30;\r\n  };\r\n\r\n  validHeight = () => {\r\n    return parseInt(this.props.height) > 150;\r\n  };\r\n\r\n  validInputValues = () => {\r\n    return (\r\n      this.validCalendarDate() &&\r\n      this.validInitialWeight() &&\r\n      this.validDesiredWeight() &&\r\n      this.validHeight()\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      looseWeight,\r\n      gainWeight,\r\n      initialWeight,\r\n      desiredWeight,\r\n      currentBMI,\r\n      desiredBMI,\r\n      numbersOfDays,\r\n      getCurrentBmiText,\r\n      getDesiredBmiText,\r\n      isClickedCountButton,\r\n    } = this.props;\r\n\r\n    const { result, emptyTitles } = this.state;\r\n\r\n    const loosedWeight = looseWeight > 0;\r\n    const text = loosedWeight ? \"loose\" : \"gain\";\r\n    const gainedWeight = gainWeight > 0;\r\n    const changeWeight = loosedWeight || gainedWeight;\r\n\r\n    const KilogPerDay = looseWeight / numbersOfDays;\r\n\r\n    const oneWeek = 7;\r\n\r\n    const WeightPerDay = Math.abs(KilogPerDay).toFixed(2);\r\n\r\n    const KiloPerWeek = Math.abs(\r\n      looseWeight / (numbersOfDays / oneWeek)\r\n    ).toFixed(2);\r\n\r\n    return (\r\n      <>\r\n        {isClickedCountButton()\r\n          ? this.validInputValues()\r\n            ? (this.cache = (\r\n                <section className=\"results\">\r\n                  <p className=\"resultParagraf\">\r\n                    {changeWeight ? \"You want \" + text + \" \" : \"\"}\r\n                    <strong>\r\n                      {loosedWeight ? Math.abs(looseWeight) + \" kg\" : \"\"}\r\n                    </strong>\r\n                    <strong>\r\n                      {gainedWeight ? Math.abs(gainWeight) + \" kg \" : \"\"}\r\n                    </strong>\r\n                  </p>\r\n                  <p className=\"resultParagraf\">\r\n                    {getCurrentBmiText() === \"\" ? \"\" : \"Your current BMI is\"}{\" \"}\r\n                    <strong>{result ? currentBMI : true}</strong> {\"(\"}\r\n                    {getCurrentBmiText()}\r\n                    {\")\"}\r\n                  </p>\r\n                  <p className=\"resultParagraf\">\r\n                    {getDesiredBmiText() === \"\" ? \"\" : \"Your desired BMI is\"}{\" \"}\r\n                    <strong>\r\n                      <strong>{result ? desiredBMI : true}</strong>{\" \"}\r\n                    </strong>{\" \"}\r\n                    {\"(\"}\r\n                    {getDesiredBmiText()}\r\n                    {\")\"}\r\n                  </p>\r\n                  <p className=\"resultParagraf\">\r\n                    {\"You should\"} {changeWeight ? text : \"\"}{\" \"}\r\n                    <strong>\r\n                      {changeWeight ? WeightPerDay : \"\"} {\"kg\"}\r\n                    </strong>{\" \"}\r\n                    {\"per day\"}\r\n                  </p>\r\n                  <p className=\"resultParagraf\">\r\n                    {\"You should\"} {changeWeight ? text : \"\"}{\" \"}\r\n                    <strong>\r\n                      {numbersOfDays < 7\r\n                        ? loosedWeight\r\n                          ? Math.abs(looseWeight)\r\n                          : \"\" || gainedWeight\r\n                          ? Math.abs(gainWeight)\r\n                          : \"\"\r\n                        : changeWeight\r\n                        ? KiloPerWeek\r\n                        : \"\"}\r\n                      {\" kg\"}\r\n                    </strong>{\" \"}\r\n                    {\"per week\"}\r\n                  </p>\r\n                </section>\r\n              ))\r\n            : (this.cache = (\r\n                <p className=\"results\" style={{ color: \"red\" }}>\r\n                  {\" \"}\r\n                  {this.messages.EmptyDescAndValue}\r\n                </p>\r\n              ))\r\n          : this.cache}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Results;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Article extends Component {\r\n  render() {\r\n    const {\r\n      initialWeight,\r\n      desiredWeight,\r\n      height,\r\n      currentDate,\r\n      endDate,\r\n      handleChangeEvent,\r\n    } = this.props;\r\n    return (\r\n      <>\r\n        <article className=\"progress_section_item\">\r\n          <label className=\"progress_section_label\">Initial weight :</label>\r\n          <div className=\"progress_section_data\">\r\n            <input\r\n              className=\"progress_bar_input\"\r\n              type=\"range\"\r\n              step=\"1\"\r\n              min=\"30\"\r\n              max=\"130\"\r\n              name=\"initialWeight\"\r\n              value={initialWeight}\r\n              onChange={handleChangeEvent}\r\n            />\r\n            <p className=\"progress_bar_result\">{initialWeight}kg</p>\r\n          </div>\r\n        </article>\r\n        <article className=\"progess_section_item\">\r\n          <label className=\"progess_section_label\">Desired weight :</label>\r\n          <div className=\"progress_section_data\">\r\n            <input\r\n              className=\"progress_bar_input\"\r\n              type=\"range\"\r\n              step=\"1\"\r\n              min=\"30\"\r\n              max=\"130\"\r\n              name=\"desiredWeight\"\r\n              value={desiredWeight}\r\n              onChange={handleChangeEvent}\r\n            />\r\n            <p className=\"progress_bar_result\">{desiredWeight}kg</p>\r\n          </div>\r\n        </article>\r\n        <article className=\"progress_section_item\">\r\n          <label className=\"progress_section_label\">Height :</label>\r\n          <div className=\"progress_section_data\">\r\n            <input\r\n              className=\"progress_bar_input\"\r\n              type=\"range\"\r\n              step=\"1\"\r\n              min=\"150\"\r\n              max=\"200\"\r\n              name=\"height\"\r\n              value={height}\r\n              onChange={handleChangeEvent}\r\n            />\r\n            <p className=\"progress_bar_result\">{height}cm</p>\r\n          </div>\r\n        </article>\r\n\r\n        <article className=\"progess_section_item\">\r\n          <label htmlFor=\"date\" name=\"start-date\">\r\n            Start date:\r\n          </label>\r\n          <div className=\"progress_section_data\">\r\n            <input\r\n              className=\"progress_bar_input\"\r\n              type=\"date\"\r\n              name=\"currentDate\"\r\n              defaultValue={currentDate}\r\n              min={currentDate}\r\n              onChange={handleChangeEvent}\r\n            />\r\n          </div>\r\n        </article>\r\n\r\n        <article className=\"progress_section_item\">\r\n          <label htmlFor=\"date\" name=\"end-date\">\r\n            End date:\r\n          </label>\r\n          <div className=\"progress_section_data\">\r\n            <input\r\n              className=\"progress_bar_input\"\r\n              type=\"date\"\r\n              name=\"endDate\"\r\n              defaultValue={endDate}\r\n              min={currentDate}\r\n              onChange={handleChangeEvent}\r\n            />\r\n          </div>\r\n        </article>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Article;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n// import Main from \"./components/Main\";\nimport Results from \"./components/Results\";\nimport Article from \"./components/Article\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    const today = new Date();\n    const tomorrow = new Date();\n    tomorrow.setDate(today.getDate() + 1);\n    const todayISO = today.toISOString().slice(0, 10);\n    const tomorrowISO = tomorrow.toISOString().slice(0, 10);\n\n    this.state = {\n      initialWeight: \"30\",\n      desiredWeight: \"30\",\n      height: \"150\",\n\n      looseWeight: \"\",\n      gainWeight: \"\",\n      currentBMI: \"\",\n      desiredBMI: \"\",\n      currentDate: todayISO,\n      endDate: tomorrowISO,\n      numbersOfDays: \"\",\n      emptyView: null,\n      clickedCountButton: false,\n    };\n  }\n\n  handleChangeEvent = (e) => {\n    // const value = e.target.value;\n    // const name = e.target.name;\n    const { name, value } = e.target;\n\n    this.setState({\n      [name]: value,\n      clickedCountButton: false,\n    });\n  };\n\n  handleCountButton = () => {\n    this.getLoseandGain();\n    this.getNumberofDays();\n    this.getBMI();\n    this.setState({\n      clickedCountButton: true,\n    });\n  };\n\n  isClickedCountButton =() => {\n    return this.state.clickedCountButton;\n  }\n\n  getLoseandGain = () => {\n    const { desiredWeight, initialWeight } = this.state;\n    const looseWeight = initialWeight - desiredWeight;\n    const gainWeight = desiredWeight - initialWeight;\n    this.setState({\n      looseWeight: looseWeight,\n      gainWeight: gainWeight,\n    });\n  };\n\n  getNumberofDays = () => {\n    const { currentDate, endDate } = this.state;\n    const oneDay = 24 * 60 * 60 * 1000;\n    const dateDiffrence = new Date(currentDate) - new Date(endDate);\n    const numbersOfDays = Math.round(Math.abs(dateDiffrence / oneDay));\n\n    this.setState({\n      currentDate: currentDate,\n      endDate: endDate,\n      numbersOfDays: numbersOfDays,\n    });\n  };\n\n  getBMI = () => {\n    const { initialWeight, desiredWeight, height } = this.state;\n\n    const currentBMI = (initialWeight / (height / 100) ** 2).toFixed(1);\n\n    const desiredBMI = (desiredWeight / (height / 100) ** 2).toFixed(1);\n\n    this.setState({\n      currentBMI: currentBMI,\n      desiredBMI: desiredBMI,\n    });\n  };\n\n  getCurrentBmiText = () => {\n    const { currentBMI } = this.state;\n\n    if (currentBMI <= 0) {\n      return \"\";\n    } else if (currentBMI < \"15\") {\n      return \"Very severely underweight\";\n    } else if (currentBMI < \"16\") {\n      return \"Severely underweight\";\n    } else if (currentBMI < \"18,5\") {\n      return \"Underweight\";\n    } else if (currentBMI < \"25\") {\n      return \"Normal\";\n    } else if (currentBMI < \"30\") {\n      return \"Overweight\";\n    } else if (currentBMI < \"35\") {\n      return \"Moderately obese \";\n    } else if (currentBMI < \"40\") {\n      return \"Severely obese \";\n    } else {\n      return \"Very severely obese \";\n    }\n  };\n\n  getDesiredBmiText = () => {\n    const { desiredBMI } = this.state;\n\n    if (desiredBMI <= 0) {\n      return \"\";\n    } else if (desiredBMI < \"15\") {\n      return \"Very severely underweight\";\n    } else if (desiredBMI < \"16\") {\n      return \"Severely underweight\";\n    } else if (desiredBMI < \"18,5\") {\n      return \"Underweight\";\n    } else if (desiredBMI < \"25\") {\n      return \"Normal\";\n    } else if (desiredBMI < \"30\") {\n      return \"Overweight\";\n    } else if (desiredBMI < \"35\") {\n      return \"Moderately obese \";\n    } else if (desiredBMI < \"40\") {\n      return \"Severely obese \";\n    } else {\n      return \"Very severely obese \";\n    }\n  };\n\n  render() {\n    const {\n      initialWeight,\n      desiredWeight,\n      height,\n      looseWeight,\n      gainWeight,\n      currentBMI,\n      desiredBMI,\n      currentDate,\n      endDate,\n      numbersOfDays,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <header className=\"header\">Desired web calculator</header>\n        <main className=\"calculator_content\">\n          <section className=\"progress_session\">\n            <Article\n              handleChangeEvent={this.handleChangeEvent}\n              initialWeight={initialWeight}\n              desiredWeight={desiredWeight}\n              height={height}\n              currentDate={currentDate}\n              endDate={endDate}\n            />\n            <Results\n            looseWeight={looseWeight}\n            gainWeight={gainWeight}\n            initialWeight={initialWeight}\n            desiredWeight={desiredWeight}\n            height={height}\n            currentBMI={currentBMI}\n            desiredBMI={desiredBMI}\n            currentDate={currentDate}\n            endDate={endDate}\n            numbersOfDays={numbersOfDays}\n            getCurrentBmiText={this.getCurrentBmiText}\n            getDesiredBmiText={this.getDesiredBmiText}\n            isClickedCountButton={this.isClickedCountButton}\n            />\n           </section>\n          <div className=\"button_position\">\n            <button onClick={this.handleCountButton} className=\"button \">\n              Count\n            </button>\n          </div>\n        </main>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}